// Supabase Configuration
// This file is automatically generated during build process

const SUPABASE_CONFIG = {
    url: '{{SUPABASE_URL}}',
    anonKey: '{{SUPABASE_ANON_KEY}}'
};

// Initialize Supabase client
const supabase = window.supabase.createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);

// Database API functions
const WildeLigaAPI = {
    // Get all teams
    async getTeams() {
        const { data, error } = await supabase
            .from('teams')
            .select('*')
            .order('name');
        
        if (error) {
            console.error('Error fetching teams:', error);
            return [];
        }
        return data;
    },

    // Get team by ID with players and achievements
    async getTeamById(id) {
        const { data: team, error: teamError } = await supabase
            .from('teams')
            .select(`
                *,
                players(*),
                achievements(*)
            `)
            .eq('id', id)
            .single();
        
        if (teamError) {
            console.error('Error fetching team:', teamError);
            return null;
        }
        return team;
    },

    // Get current standings
    async getStandings() {
        const { data, error } = await supabase
            .from('standings')
            .select('*')
            .order('points', { ascending: false });
        
        if (error) {
            console.error('Error fetching standings:', error);
            return [];
        }
        return data;
    },

    // Get matches by matchday
    async getMatchesByMatchday(matchday) {
        let query = supabase
            .from('matches')
            .select(`
                *,
                home_team:teams!matches_home_team_id_fkey(name),
                away_team:teams!matches_away_team_id_fkey(name)
            `)
            .eq('status', 'completed')
            .order('matchday', { ascending: false });
        
        if (matchday && matchday !== 'all') {
            query = query.eq('matchday', matchday);
        }
        
        const { data, error } = await query;
        
        if (error) {
            console.error('Error fetching matches:', error);
            return [];
        }
        return data;
    },

    // Get matches for a specific team
    async getTeamMatches(teamName) {
        const { data, error } = await supabase
            .from('matches')
            .select(`
                *,
                home_team:teams!matches_home_team_id_fkey(name),
                away_team:teams!matches_away_team_id_fkey(name)
            `)
            .or(`home_team.name.eq.${teamName},away_team.name.eq.${teamName}`)
            .eq('status', 'completed')
            .order('matchday', { ascending: false });
        
        if (error) {
            console.error('Error fetching team matches:', error);
            return [];
        }
        return data;
    },

    // Get all matches
    async getAllMatches() {
        const { data, error } = await supabase
            .from('matches')
            .select(`
                *,
                home_team:teams!matches_home_team_id_fkey(name),
                away_team:teams!matches_away_team_id_fkey(name)
            `)
            .eq('status', 'completed')
            .order('matchday', { ascending: false });
        
        if (error) {
            console.error('Error fetching all matches:', error);
            return [];
        }
        return data;
    },

    // Add a new match (for admin functionality)
    async addMatch(homeTeamId, awayTeamId, homeScore, awayScore, matchday, date) {
        const { data, error } = await supabase
            .from('matches')
            .insert([
                {
                    home_team_id: homeTeamId,
                    away_team_id: awayTeamId,
                    home_score: homeScore,
                    away_score: awayScore,
                    matchday: matchday,
                    match_date: date,
                    status: 'completed'
                }
            ])
            .select();
        
        if (error) {
            console.error('Error adding match:', error);
            return null;
        }
        return data[0];
    },

    // Update team information
    async updateTeam(id, updates) {
        const { data, error } = await supabase
            .from('teams')
            .update(updates)
            .eq('id', id)
            .select();
        
        if (error) {
            console.error('Error updating team:', error);
            return null;
        }
        return data[0];
    }
};

// Export for use in other files
window.WildeLigaAPI = WildeLigaAPI;
